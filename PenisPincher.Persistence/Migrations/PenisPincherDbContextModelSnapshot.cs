// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PenisPincher.Persistence;

namespace PenisPincher.Persistence.Migrations
{
    [DbContext(typeof(PenisPincherDbContext))]
    partial class PenisPincherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PenisPincher.Core.Models.DiscordServerConfiguration", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<bool>("LogToServer")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServerLogChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("StreamNotificationChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("DiscordServerConfiguration");
                });

            modelBuilder.Entity("PenisPincher.Core.Models.MonitoredStream", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationRoleIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OwningServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("StreamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OwningServerId");

                    b.ToTable("MonitoredStream");
                });

            modelBuilder.Entity("PenisPincher.Core.Models.ReactionRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmoteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OwningServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OwningServerId");

                    b.ToTable("ReactionRole");
                });

            modelBuilder.Entity("PenisPincher.Core.Models.MonitoredStream", b =>
                {
                    b.HasOne("PenisPincher.Core.Models.DiscordServerConfiguration", "OwningServer")
                        .WithMany("MonitoredStreams")
                        .HasForeignKey("OwningServerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OwningServer");
                });

            modelBuilder.Entity("PenisPincher.Core.Models.ReactionRole", b =>
                {
                    b.HasOne("PenisPincher.Core.Models.DiscordServerConfiguration", "OwningServer")
                        .WithMany("RoleReactions")
                        .HasForeignKey("OwningServerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OwningServer");
                });

            modelBuilder.Entity("PenisPincher.Core.Models.DiscordServerConfiguration", b =>
                {
                    b.Navigation("MonitoredStreams");

                    b.Navigation("RoleReactions");
                });
#pragma warning restore 612, 618
        }
    }
}
